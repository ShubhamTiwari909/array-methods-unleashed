{
  "metadata": {
    "name": "Scribbler Notebook",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "// Searching and indexing methods\nconst humans = [\n  {\n\tid: 1001,\n\tname: \"Bruce\",\n\tisAvailable: true\n  },\n   {\n\tid: 1002,\n\tname: \"Clark\",\n\tisAvailable: true\n  },\n   {\n\tid: 1003,\n\tname: \"Diana\",\n\tisAvailable: true\n  },\n   {\n\tid: 1004,\n\tname: \"Barry\",\n\tisAvailable: false\n  }\n]\n\nconst hereos = [\"Batman\",\"Superman\",\"Wonder woman\",\"Flash\"]\n\n// find method\nconst findBatman = humans.find(hero => hero.name === \"Bruce\")\nscrib.show(\"<span style='color:cyan;font-weight:bold'>Find method</span>\",\"<pre style='color:white'>\",findBatman,\"</pre>\")\n\n// findIndex method\nconst findSupermanIndex = humans.findIndex(hero => hero.name === \"Clark\")\nscrib.show(\"<span style='color:cyan;font-weight:bold'>Find index method</span>\",\"<pre style='color:white'>\",findSupermanIndex,\"</pre>\")\n\n// indexOf method\nconst findFlash = hereos.indexOf(\"Flash\")\nscrib.show(\"<span style='color:cyan;font-weight:bold'>Index of method</span>\",\"<pre style='color:white'>\",findFlash,\"</pre>\")\n\n// lastIndex\nconst findSuperman = hereos.lastIndexOf(\"Superman\")\nscrib.show(\"<span style='color:cyan;font-weight:bold'>Last indexOf method</span>\",\"<pre style='color:white'>\",findSuperman,\"</pre>\")\n\n// includes\nconst wonderWomanInTeam = hereos.includes(\"Wonder woman\")\nscrib.show(\"<span style='color:cyan;font-weight:bold'>Includes method</span>\",\"<pre style='color:white'>\",wonderWomanInTeam,\"</pre>\")\n\n// some \nconst availableHeros = humans.some(human => human.isAvailable === true)\nscrib.show(\"<span style='color:cyan;font-weight:bold'>Some method</span>\",\"<pre style='color:white'>\",availableHeros,\"</pre>\")\n\n// every\nconst allHeroesAvailable = humans.every(human => human.isAvailable === true)\nscrib.show(\"<span style='color:cyan;font-weight:bold'>Every method</span>\",\"<pre style='color:white'>\",allHeroesAvailable,\"</pre>\")",
      "status": "[3]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "<span style=\"color:cyan;font-weight:bold\">Find method</span> <pre style=\"color:white\"> {\n  \"id\": 1001,\n  \"name\": \"Bruce\",\n  \"isAvailable\": true\n} </pre> <br><span style=\"color:cyan;font-weight:bold\">Find index method</span> <pre style=\"color:white\"> 1 </pre> <br><span style=\"color:cyan;font-weight:bold\">Index of method</span> <pre style=\"color:white\"> 3 </pre> <br><span style=\"color:cyan;font-weight:bold\">Last indexOf method</span> <pre style=\"color:white\"> 1 </pre> <br><span style=\"color:cyan;font-weight:bold\">Includes method</span> <pre style=\"color:white\"> true </pre> <br><span style=\"color:cyan;font-weight:bold\">Some method</span> <pre style=\"color:white\"> true </pre> <br><span style=\"color:cyan;font-weight:bold\">Every method</span> <pre style=\"color:white\"> false </pre> <br>",
      "type": "code"
    },
    {
      "code": "// Chaining with other array methods like filter\nconst humans = [\n  {\n\tid: 1001,\n\tname: \"Bruce\",\n\tisAvailable: true\n  },\n   {\n\tid: 1002,\n\tname: \"Clark\",\n\tisAvailable: true\n  },\n   {\n\tid: 1003,\n\tname: \"Diana\",\n\tisAvailable: true\n  },\n   {\n\tid: 1004,\n\tname: \"Barry\",\n\tisAvailable: false\n  }\n]\n\nconst isBatmanAvailable = humans.filter(human => human.isAvailable).find(human => human.name === \"Bruce\")\nscrib.show(\"<span style='color:cyan;font-weight:bold'>Chaining with filter method</span>\",\"<pre style='color:white'>\",isBatmanAvailable,\"</pre>\")",
      "status": "[4]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "<span style=\"color:cyan;font-weight:bold\">Chaining with filter method</span> <pre style=\"color:white\"> {\n  \"id\": 1001,\n  \"name\": \"Bruce\",\n  \"isAvailable\": true\n} </pre> <br>",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/scribbler",
  "run_on_load": false
}