{
  "metadata": {
    "name": "Scribbler Notebook",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "const technologies = [\n  {\n\tname:\"HTML\",\n\ttype:\"Frontend\"\n  },\n  {\n\tname:\"CSS\",\n\ttype:\"Frontend\"\n  },\n  {\n\tname:\"JS\",\n\ttype:\"Frontend\"\n  },\n  {\n\tname:\"React\",\n\ttype:\"Frontend\"\n  },\n  {\n\tname:\"Java\",\n\ttype:\"Backend\"\n  },\n  {\n\tname:\"Node\",\n\ttype:\"Backend\"\n  },\n]\n\nconst otherTechnologies = [\n  {\n\tname:\"Python\",\n\ttype:\"Backend\"\n  },\n  {\n\tname:\"Rust\",\n\ttype:\"Backend\"\n  },\n]\n\n// filter method\nconst frontendTechs = technologies.filter(technology => {\n  if(technology.type === \"Frontend\"){\n\treturn technology\n  }\n})\nscrib.show(\"<span style='color:cyan;font-weight:bold'>Frontend techs</span>\",\"<pre style='color:white'>\",frontendTechs,\"</pre>\") // will return an array with items with type Frontend\n\n// map method\nconst frontendTechsNames = frontendTechs.map(technology => technology.name) // will return an array with technology names with type Frontend\nscrib.show(\"<span style='color:cyan;font-weight:bold'>Frontend tech names</span>\",\"<pre style='color:white'>\",frontendTechsNames,\"</pre>\") // will return an array with items with type Frontend\n\n\n// slice method\nconst firstThreeItems = technologies.slice(0,3) // first three items in the array\nscrib.show(\"<span style='color:cyan;font-weight:bold'>First three items</span>\",\"<pre style='color:white'>\",firstThreeItems,\"</pre>\")\n\n// concat method\nconst combinedTechnologies = technologies.concat(otherTechnologies)\nscrib.show(\"<span style='color:cyan;font-weight:bold'>Combined technologies</span>\",\"<pre style='color:white'>\",combinedTechnologies,\"</pre>\")\n\n// flat method\nconst nestedArrays = [\"HTML\",\"CSS\",\"JS\",[\"REACT\",\"NEXTJS\", [\"TAILWIND\",[\"SCSS\"]]]]\nconst oneLevelFlat = nestedArrays.flat()\nconst twoLevelFlat = nestedArrays.flat(2)\nconst infinityLevelFlat = nestedArrays.flat(Infinity)\nscrib.show(\"<span style='color:cyan;font-weight:bold'>One level flat</span>\",\"<pre style='color:white'>\",oneLevelFlat,\"</pre>\")\nscrib.show(\"<span style='color:cyan;font-weight:bold'>Two level flat</span>\",\"<pre style='color:white'>\",twoLevelFlat,\"</pre>\")\nscrib.show(\"<span style='color:cyan;font-weight:bold'>Infinity level flat</span>\",\"<pre style='color:white'>\",infinityLevelFlat,\"</pre>\")\n\n// flatMap method\nconst webTechnologies = [\"HTML\",\"CSS\",\"JS\"]\nconst flatAndLowercase = webTechnologies.flatMap(technology => technology.toLowerCase())\nscrib.show(\"<span style='color:cyan;font-weight:bold'>Flat and map</span>\",\"<pre style='color:white'>\",flatAndLowercase,\"</pre>\")",
      "status": "[7]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "<span style=\"color:cyan;font-weight:bold\">Frontend techs</span> <pre style=\"color:white\"> [\n  {\n    \"name\": \"HTML\",\n    \"type\": \"Frontend\"\n  },\n  {\n    \"name\": \"CSS\",\n    \"type\": \"Frontend\"\n  },\n  {\n    \"name\": \"JS\",\n    \"type\": \"Frontend\"\n  },\n  {\n    \"name\": \"React\",\n    \"type\": \"Frontend\"\n  }\n] </pre> <br><span style=\"color:cyan;font-weight:bold\">Frontend tech names</span> <pre style=\"color:white\"> [\n  \"HTML\",\n  \"CSS\",\n  \"JS\",\n  \"React\"\n] </pre> <br><span style=\"color:cyan;font-weight:bold\">First three items</span> <pre style=\"color:white\"> [\n  {\n    \"name\": \"HTML\",\n    \"type\": \"Frontend\"\n  },\n  {\n    \"name\": \"CSS\",\n    \"type\": \"Frontend\"\n  },\n  {\n    \"name\": \"JS\",\n    \"type\": \"Frontend\"\n  }\n] </pre> <br><span style=\"color:cyan;font-weight:bold\">Combined technologies</span> <pre style=\"color:white\"> [\n  {\n    \"name\": \"HTML\",\n    \"type\": \"Frontend\"\n  },\n  {\n    \"name\": \"CSS\",\n    \"type\": \"Frontend\"\n  },\n  {\n    \"name\": \"JS\",\n    \"type\": \"Frontend\"\n  },\n  {\n    \"name\": \"React\",\n    \"type\": \"Frontend\"\n  },\n  {\n    \"name\": \"Java\",\n    \"type\": \"Backend\"\n  },\n  {\n    \"name\": \"Node\",\n    \"type\": \"Backend\"\n  },\n  {\n    \"name\": \"Python\",\n    \"type\": \"Backend\"\n  },\n  {\n    \"name\": \"Rust\",\n    \"type\": \"Backend\"\n  }\n] </pre> <br><span style=\"color:cyan;font-weight:bold\">One level flat</span> <pre style=\"color:white\"> [\n  \"HTML\",\n  \"CSS\",\n  \"JS\",\n  \"REACT\",\n  \"NEXTJS\",\n  [\n    \"TAILWIND\",\n    [\n      \"SCSS\"\n    ]\n  ]\n] </pre> <br><span style=\"color:cyan;font-weight:bold\">Two level flat</span> <pre style=\"color:white\"> [\n  \"HTML\",\n  \"CSS\",\n  \"JS\",\n  \"REACT\",\n  \"NEXTJS\",\n  \"TAILWIND\",\n  [\n    \"SCSS\"\n  ]\n] </pre> <br><span style=\"color:cyan;font-weight:bold\">Infinity level flat</span> <pre style=\"color:white\"> [\n  \"HTML\",\n  \"CSS\",\n  \"JS\",\n  \"REACT\",\n  \"NEXTJS\",\n  \"TAILWIND\",\n  \"SCSS\"\n] </pre> <br><span style=\"color:cyan;font-weight:bold\">Flat and map</span> <pre style=\"color:white\"> [\n  \"html\",\n  \"css\",\n  \"js\"\n] </pre> <br>",
      "type": "code"
    },
    {
      "code": "// Chaining of methods\nconst technologies = [\n  {\n\tname:\"HTML\",\n\ttype:\"Frontend\"\n  },\n  {\n\tname:\"CSS\",\n\ttype:\"Frontend\"\n  },\n  {\n\tname:\"JS\",\n\ttype:\"Frontend\"\n  },\n  {\n\tname:\"React\",\n\ttype:\"Frontend\"\n  },\n  {\n\tname:\"Java\",\n\ttype:\"Backend\"\n  },\n  {\n\tname:\"Node\",\n\ttype:\"Backend\"\n  },\n]\n\n// Filter and map\nconst frontendNamesByChaining = technologies.filter(technology => technology.type === \"Frontend\").map(technology => technology.name)\nscrib.show(\"<span style='color:cyan;font-weight:bold'>Chaining methods</span>\",\"<pre style='color:white'>\",frontendNamesByChaining,\"</pre>\")\n\n// flat and map\nconst nestedArrays = [\"HTML\",\"CSS\",\"JS\",[\"REACT\",\"NEXTJS\", [\"TAILWIND\",[\"SCSS\"]]]]\nconst flatAndMapChaining = nestedArrays.flat(Infinity).map(technology => technology.toLowerCase())\nscrib.show(\"<span style='color:cyan;font-weight:bold'>Flat and map chaining methods</span>\",\"<pre style='color:white'>\",flatAndMapChaining,\"</pre>\")",
      "status": "[8]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "<span style=\"color:cyan;font-weight:bold\">Chaining methods</span> <pre style=\"color:white\"> [\n  \"HTML\",\n  \"CSS\",\n  \"JS\",\n  \"React\"\n] </pre> <br><span style=\"color:cyan;font-weight:bold\">Flat and map chaining methods</span> <pre style=\"color:white\"> [\n  \"html\",\n  \"css\",\n  \"js\",\n  \"react\",\n  \"nextjs\",\n  \"tailwind\",\n  \"scss\"\n] </pre> <br>",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/scribbler",
  "run_on_load": false
}